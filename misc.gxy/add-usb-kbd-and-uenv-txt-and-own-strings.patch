diff --git a/arch/arm/dts/meson-g12a-sei510.dts b/arch/arm/dts/meson-g12a-sei510.dts
index b00d0468c7..0226d2a5da 100644
--- a/arch/arm/dts/meson-g12a-sei510.dts
+++ b/arch/arm/dts/meson-g12a-sei510.dts
@@ -13,7 +13,7 @@
 
 / {
 	compatible = "seirobotics,sei510", "amlogic,g12a";
-	model = "SEI Robotics SEI510";
+	model = "hexdump usbkbd/hdmi u-boot g12a";
 
 	adc_keys {
 		compatible = "adc-keys";
diff --git a/arch/arm/dts/meson-sm1-sei610.dts b/arch/arm/dts/meson-sm1-sei610.dts
index 5ab139a34c..44ec88afc8 100644
--- a/arch/arm/dts/meson-sm1-sei610.dts
+++ b/arch/arm/dts/meson-sm1-sei610.dts
@@ -13,7 +13,7 @@
 
 / {
 	compatible = "seirobotics,sei610", "amlogic,sm1";
-	model = "SEI Robotics SEI610";
+	model = "hexdump usbkbd/hdmi u-boot sm1";
 
 	aliases {
 		serial0 = &uart_AO;
diff --git a/configs/sei510_defconfig b/configs/sei510_defconfig
index 8ee3a138e1..d72cd8929a 100644
--- a/configs/sei510_defconfig
+++ b/configs/sei510_defconfig
@@ -15,9 +15,7 @@ CONFIG_IDENT_STRING=" sei510"
 CONFIG_DEFAULT_DEVICE_TREE="meson-g12a-sei510"
 CONFIG_DEBUG_UART=y
 CONFIG_OF_BOARD_SETUP=y
-CONFIG_USE_PREBOOT=y
-CONFIG_PREBOOT="run load_logo"
-# CONFIG_CONSOLE_MUX is not set
+CONFIG_CONSOLE_MUX=y
 CONFIG_MISC_INIT_R=y
 # CONFIG_DISPLAY_CPUINFO is not set
 # CONFIG_CMD_BDI is not set
@@ -81,3 +79,8 @@ CONFIG_VIDEO_DT_SIMPLEFB=y
 CONFIG_SPLASH_SCREEN=y
 CONFIG_SPLASH_SCREEN_ALIGN=y
 CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_DISPLAY_BOARDINFO_LATE=y
+CONFIG_DM_KEYBOARD=y
+CONFIG_USB_KEYBOARD=y
+CONFIG_BOOTDELAY=5
+CONFIG_USE_PREBOOT=y
diff --git a/configs/sei610_defconfig b/configs/sei610_defconfig
index 43932b4c96..a1826f3959 100644
--- a/configs/sei610_defconfig
+++ b/configs/sei610_defconfig
@@ -15,9 +15,7 @@ CONFIG_IDENT_STRING=" sei610"
 CONFIG_DEFAULT_DEVICE_TREE="meson-sm1-sei610"
 CONFIG_DEBUG_UART=y
 CONFIG_OF_BOARD_SETUP=y
-CONFIG_USE_PREBOOT=y
-CONFIG_PREBOOT="run load_logo"
-# CONFIG_CONSOLE_MUX is not set
+CONFIG_CONSOLE_MUX=y
 CONFIG_MISC_INIT_R=y
 # CONFIG_DISPLAY_CPUINFO is not set
 # CONFIG_CMD_BDI is not set
@@ -81,3 +79,8 @@ CONFIG_VIDEO_DT_SIMPLEFB=y
 CONFIG_SPLASH_SCREEN=y
 CONFIG_SPLASH_SCREEN_ALIGN=y
 CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_DISPLAY_BOARDINFO_LATE=y
+CONFIG_DM_KEYBOARD=y
+CONFIG_USB_KEYBOARD=y
+CONFIG_BOOTDELAY=5
+CONFIG_USE_PREBOOT=y
diff --git a/include/configs/meson64.h b/include/configs/meson64.h
index c895a24eca..d997352489 100644
--- a/include/configs/meson64.h
+++ b/include/configs/meson64.h
@@ -74,6 +74,10 @@
 #endif
 
 #ifndef CONFIG_EXTRA_ENV_SETTINGS
+/* the led system-status on is a hack to turn on the led as for some strange reason it does not
+ * the usb start below makes sure a usb keyboard is available when the autoboot prompt starts
+ * the stdin line is to disable the serial console as it might produce noise on the cmdline
+ * otherwise in some situations so that the system will hang in u-boot cmdline at boot */
 #define CONFIG_EXTRA_ENV_SETTINGS \
 	"stdin=" STDIN_CFG "\0" \
 	"stdout=" STDOUT_CFG "\0" \
@@ -84,6 +88,19 @@
 	"pxefile_addr_r=0x01080000\0" \
 	"ramdisk_addr_r=0x13000000\0" \
 	"fdtfile=amlogic/" CONFIG_DEFAULT_DEVICE_TREE ".dtb\0" \
+	"bootenv_addr_r=0x01080000\0" \
+	"preboot=led system-status on; " \
+		"usb start; " \
+		"mmc dev 1; " \
+		"setenv stdin usbkbd; " \
+		"for target in 1 2;do " \
+		"for prefix in / /boot/;do " \
+			"if test -e mmc ${target}:1 ${prefix}uEnv.txt;then " \
+				"load mmc ${target}:1 ${bootenv_addr_r} ${prefix}uEnv.txt; " \
+				"env import -t ${bootenv_addr_r} ${filesize}; " \
+			"fi; " \
+		"done; " \
+	"done\0" \
 	BOOTENV
 #endif
 
diff --git a/include/configs/meson64_android.h b/include/configs/meson64_android.h
index 8fff915b50..166faaa630 100644
--- a/include/configs/meson64_android.h
+++ b/include/configs/meson64_android.h
@@ -10,122 +10,6 @@
 #define __MESON64_ANDROID_CONFIG_H
 
 
-#define BOOTENV_DEV_FASTBOOT(devtypeu, devtypel, instance) \
-	"bootcmd_fastboot=" \
-		"sm reboot_reason reason;" \
-		"setenv run_fastboot 0;" \
-		"if test \"${boot_source}\" = \"usb\"; then " \
-			"echo Fastboot forced by usb rom boot;" \
-			"setenv run_fastboot 1;" \
-		"fi;" \
-		"if gpt verify mmc ${mmcdev} ${partitions}; then; " \
-		"else " \
-			"echo Broken MMC partition scheme;" \
-			"setenv run_fastboot 1;" \
-		"fi;" \
-		"if test \"${reason}\" = \"bootloader\" -o " \
-			"\"${reason}\" = \"fastboot\"; then " \
-			"echo Fastboot asked by reboot reason;" \
-			"setenv run_fastboot 1;" \
-		"fi;" \
-		"if test \"${skip_fastboot}\" -eq 1; then " \
-			"echo Fastboot skipped by environment;" \
-			"setenv run_fastboot 0;" \
-		"fi;" \
-		"if test \"${force_fastboot}\" -eq 1; then " \
-			"echo Fastboot forced by environment;" \
-			"setenv run_fastboot 1;" \
-		"fi;" \
-		"if test \"${run_fastboot}\" -eq 1; then " \
-			"echo Running Fastboot...;" \
-			"fastboot 0;" \
-		"fi\0"
-
-#define BOOTENV_DEV_NAME_FASTBOOT(devtypeu, devtypel, instance)	\
-		"fastboot "
-
-/* TOFIX: Run actual recovery instead of fastboot */
-#define BOOTENV_DEV_RECOVERY(devtypeu, devtypel, instance) \
-	"bootcmd_recovery=" \
-		"pinmux dev pinctrl@14;" \
-		"pinmux dev pinctrl@40;" \
-		"sm reboot_reason reason;" \
-		"setenv run_recovery 0;" \
-		"if run check_button; then " \
-			"echo Recovery button is pressed;" \
-			"setenv run_recovery 1;" \
-		"elif test \"${reason}\" = \"recovery\" -o " \
-			  "\"${reason}\" = \"update\"; then " \
-			"echo Recovery asked by reboot reason;" \
-			"setenv run_recovery 1;" \
-		"fi;" \
-		"if test \"${skip_recovery}\" -eq 1; then " \
-			"echo Recovery skipped by environment;" \
-			"setenv run_recovery 0;" \
-		"fi;" \
-		"if test \"${force_recovery}\" -eq 1; then " \
-			"echo Recovery forced by environment;" \
-			"setenv run_recovery 1;" \
-		"fi;" \
-		"if test \"${run_recovery}\" -eq 1; then " \
-			"echo Running Recovery...;" \
-			"fastboot 0;" \
-		"fi\0"
-
-#define BOOTENV_DEV_NAME_RECOVERY(devtypeu, devtypel, instance)	\
-		"recovery "
-
-#define BOOTENV_DEV_SYSTEM(devtypeu, devtypel, instance) \
-	"bootcmd_system=" \
-		"echo Loading Android boot partition...;" \
-		"mmc dev ${mmcdev};" \
-		"setenv bootargs ${bootargs} console=${console} androidboot.serialno=${serial#};" \
-		"part start mmc ${mmcdev} ${bootpart} boot_start;" \
-		"part size mmc ${mmcdev} ${bootpart} boot_size;" \
-		"if mmc read ${loadaddr} ${boot_start} ${boot_size}; then " \
-			"echo Running Android...;" \
-			"bootm ${loadaddr};" \
-		"fi;" \
-		"echo Failed to boot Android...;" \
-		"reset\0"
-
-#define BOOTENV_DEV_NAME_SYSTEM(devtypeu, devtypel, instance)	\
-		"system "
-
-#define BOOT_TARGET_DEVICES(func) \
-	func(FASTBOOT, fastboot, na) \
-	func(RECOVERY, recovery, na) \
-	func(SYSTEM, system, na) \
-
-#define PREBOOT_LOAD_LOGO \
-	"mmc dev ${mmcdev};" \
-	"part start mmc ${mmcdev} ${logopart} boot_start;" \
-	"part size mmc ${mmcdev} ${logopart} boot_size;" \
-	"if mmc read ${loadaddr} ${boot_start} ${boot_size}; then " \
-			"bmp display ${loadaddr} m m;" \
-	"fi;"
-
-#define CONFIG_EXTRA_ENV_SETTINGS                                     \
-	"partitions=" PARTS_DEFAULT "\0"                              \
-	"mmcdev=2\0"                                                  \
-	"bootpart=1\0"                                                \
-	"logopart=2\0"                                                \
-	"gpio_recovery=88\0"                                          \
-	"check_button=gpio input ${gpio_recovery};test $? -eq 0;\0"   \
-	"load_logo=" PREBOOT_LOAD_LOGO "\0"			      \
-	"console=/dev/ttyAML0\0"                                      \
-	"bootargs=no_console_suspend\0"                               \
-	"stdin=" STDIN_CFG "\0"                                       \
-	"stdout=" STDOUT_CFG "\0"                                     \
-	"stderr=" STDOUT_CFG "\0"                                     \
-	"loadaddr=0x01000000\0"                                       \
-	"fdt_addr_r=0x01000000\0"                                     \
-	"scriptaddr=0x08000000\0"                                     \
-	"kernel_addr_r=0x01080000\0"                                  \
-	"pxefile_addr_r=0x01080000\0"                                 \
-	"ramdisk_addr_r=0x13000000\0"                                 \
-	"fdtfile=amlogic/" CONFIG_DEFAULT_DEVICE_TREE ".dtb\0" BOOTENV
-
 #include <configs/meson64.h>
 
 #endif /* __MESON64_ANDROID_CONFIG_H */
